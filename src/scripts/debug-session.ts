#!/usr/bin/env ts-node

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables de entorno no configuradas');
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úì' : '‚úó');
  console.error('   NEXT_PUBLIC_SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úì' : '‚úó');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

async function debugSession() {
  console.log('üîç Diagn√≥stico de Sesi√≥n y Conectividad\n');
  
  // 1. Verificar conectividad b√°sica
  console.log('1Ô∏è‚É£ Verificando conectividad a Supabase...');
  try {
    const { data, error } = await supabase
      .from('properties')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Error de conectividad:', error.message);
      if (error.message.includes('JWT') || error.message.includes('expired')) {
        console.log('üîí Problema de autenticaci√≥n detectado');
      }
    } else {
      console.log('‚úÖ Conectividad b√°sica OK');
    }
  } catch (error) {
    console.error('üí• Error cr√≠tico de conectividad:', error);
  }
  
  // 2. Verificar estado de la sesi√≥n actual
  console.log('\n2Ô∏è‚É£ Verificando estado de sesi√≥n...');
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Error al obtener sesi√≥n:', error.message);
    } else if (session) {
      console.log('‚úÖ Sesi√≥n activa encontrada');
      console.log('   Usuario:', session.user.email);
      console.log('   Expira en:', new Date(session.expires_at! * 1000).toLocaleString());
      
      const now = Math.floor(Date.now() / 1000);
      const timeLeft = session.expires_at! - now;
      console.log(`   Tiempo restante: ${Math.floor(timeLeft / 60)} minutos`);
      
      if (timeLeft < 300) { // Menos de 5 minutos
        console.log('‚ö†Ô∏è La sesi√≥n expirar√° pronto');
      }
    } else {
      console.log('üö™ No hay sesi√≥n activa');
    }
  } catch (error) {
    console.error('üí• Error cr√≠tico al verificar sesi√≥n:', error);
  }
  
  // 3. Probar operaci√≥n de lectura
  console.log('\n3Ô∏è‚É£ Probando operaci√≥n de lectura...');
  try {
    const start = Date.now();
    const { data, error } = await supabase
      .from('properties')
      .select('id, title')
      .limit(5);
    
    const duration = Date.now() - start;
    
    if (error) {
      console.error('‚ùå Error en lectura:', error.message);
      console.error('   C√≥digo:', error.code);
      console.error('   Detalles:', error.details);
    } else {
      console.log(`‚úÖ Lectura exitosa en ${duration}ms`);
      console.log(`   Propiedades encontradas: ${data.length}`);
    }
  } catch (error) {
    console.error('üí• Error cr√≠tico en lectura:', error);
  }
  
  // 4. Probar operaci√≥n de escritura (con rollback)
  console.log('\n4Ô∏è‚É£ Probando operaci√≥n de escritura...');
  try {
    const testData = {
      title: `TEST_${Date.now()}`,
      description: 'Propiedad de prueba - ELIMINAR',
      price: 1,
      currency: 'USD',
      operation_type: 'venta',
      property_type: 'casa',
      bedrooms: 1,
      bathrooms: 1,
      address: 'Test Address',
      city: 'Test City',
      province: 'Test Province',
      country: 'Test Country',
      features: ['test'],
      images: [],
      featured: false,
      status: 'disponible'
    };
    
    const start = Date.now();
    const { data, error } = await supabase
      .from('properties')
      .insert([testData])
      .select('id')
      .single();
    
    const duration = Date.now() - start;
    
    if (error) {
      console.error('‚ùå Error en escritura:', error.message);
      console.error('   C√≥digo:', error.code);
      if (error.message.includes('JWT') || error.message.includes('expired')) {
        console.log('üîí Problema de autenticaci√≥n en escritura');
      }
    } else {
      console.log(`‚úÖ Escritura exitosa en ${duration}ms`);
      console.log('   ID creado:', data.id);
      
      // Limpiar: eliminar el registro de prueba
      await supabase.from('properties').delete().eq('id', data.id);
      console.log('üßπ Registro de prueba eliminado');
    }
  } catch (error) {
    console.error('üí• Error cr√≠tico en escritura:', error);
  }
  
  // 5. Verificar bucket de Storage
  console.log('\n5Ô∏è‚É£ Verificando Storage...');
  try {
    const { data, error } = await supabase.storage
      .from('properties-images')
      .list('', { limit: 1 });
    
    if (error) {
      console.error('‚ùå Error en Storage:', error.message);
    } else {
      console.log('‚úÖ Storage accesible');
      console.log(`   Archivos en bucket: ${data.length > 0 ? 'S√≠' : 'Vac√≠o'}`);
    }
  } catch (error) {
    console.error('üí• Error cr√≠tico en Storage:', error);
  }
  
  console.log('\nüìã Resumen del diagn√≥stico completado');
}

debugSession().catch(console.error); 